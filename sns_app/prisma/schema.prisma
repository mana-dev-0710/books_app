generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  password      String?
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  Bookshelf        Bookshelf[]
  ratings          Rating[]
  favorites        Favorite[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Bookshelf {
  id            　　　　String   @id @default(uuid())
  userId        　　　　String
  isbn          　　　　String
  finishedReading      Boolean  @default(false) // 読了フラグ
  finishedAt    　　　　DateTime?
  isRated              Boolean  @default(false) // 評価フラグ
  createdAt     　　　　DateTime @default(now())
  updatedAt     　　　　DateTime @updatedAt

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  ratings       Rating[]

  @@unique([userId, isbn])
}

model Rating {
  id              String   @id @default(uuid())
  userId          String
  bookshelfId     String　　@unique
  rating          Int      // 1 ~ 5 点
  reviewTitle     String
  reviewContent   String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now())

  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookshelf     Bookshelf     @relation(fields: [bookshelfId], references: [id], onDelete: Cascade)
}

model Favorite {
  id            String   @id @default(uuid())
  userId        String
  isbn          String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now())

  user          User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, isbn])
}

